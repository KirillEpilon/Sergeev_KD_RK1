/*
 ******************************************************************************
 File:     main.cpp
 Info:     Generated by Atollic TrueSTUDIO(R) 9.3.0   2023-05-27

 The MIT License (MIT)
 Copyright (c) 2019 STMicroelectronics

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.

 ******************************************************************************
 */

/* Includes */
#include "stm32f0xx.h"
#include <stdio.h>
#include <string.h>

#define ADC_CFGR1_EXTSEL_3  (3 << 6)
#define DMA_DATA_ADC_RDY	(1 << 0)


void Init_TIM3(uint8_t freq) {

	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
	TIM3->PSC = 8000;
	TIM3->ARR = 1000 / freq - 1;
	TIM3->CR2 |= TIM_CR2_MMS_1;
	TIM3->CR1 |= TIM_CR1_CEN;

}

void Init_DMA(uint16_t* dataAdc) {

	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
	DMA1_Channel1->CNDTR = 32;
	DMA1_Channel1->CMAR = (uint32_t) dataAdc;
	DMA1_Channel1->CPAR = (uint32_t) (&(ADC1->DR));

	DMA1_Channel1->CCR |= DMA_CCR_MINC;
	DMA1_Channel1->CCR |= DMA_CCR_PSIZE_0;
	DMA1_Channel1->CCR |= DMA_CCR_MSIZE_0;
	DMA1_Channel1->CCR &= ~DMA_CCR_DIR;
	DMA1_Channel1->CCR |= DMA_CCR_CIRC;
	DMA1_Channel1->CCR |= DMA_CCR_TCIE;
	NVIC_SetPriority(DMA1_Ch1_IRQn, 5);
	NVIC_EnableIRQ(DMA1_Ch1_IRQn);
	__enable_irq();
	DMA1_Channel1->CCR |= DMA_CCR_EN;

}

void Init_ADC(uint16_t* dataAdc) {

	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
	GPIOB->MODER |= GPIO_MODER_MODER0;

	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
	GPIOC->MODER |= GPIO_MODER_MODER0;

	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
	RCC->CR2 |= RCC_CR2_HSI14ON;

	ADC1->CFGR1 |= ADC_CFGR1_OVRMOD | ADC_CFGR1_DISCEN | ADC_CFGR1_EXTEN_0
			| ADC_CFGR1_EXTSEL_3;
	ADC1->SMPR &= ~ADC_SMPR1_SMPR;
	ADC1->CHSELR = ADC_CHSELR_CHSEL1;

	Init_DMA(dataAdc);
	ADC1->CFGR1 |= ADC_CFGR1_DMACFG;
	ADC1->CFGR1 |= ADC_CFGR1_DMAEN;

	ADC1->CR |= ADC_CR_ADEN;
	while ((ADC1->ISR & ADC_ISR_ADRDY) != ADC_ISR_ADRDY)
		;

}

void Start_ADC() {

	ADC1->CR |= ADC_CR_ADSTART;

}

void Stop_ADC() {

	ADC1->CR |= ADC_CR_ADSTP;

}

void Init_USART() {

	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
	GPIOA->MODER |= GPIO_MODER_MODER9_1 | GPIO_MODER_MODER10_1;
	GPIOA->AFR[1] |= (1 << 4) | (1 << 8);
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;

	USART1->CR1 |= USART_CR1_TE | USART_CR1_RE;
	USART1->CR2 &= ~USART_CR2_MSBFIRST;
	USART1->BRR = SystemCoreClock / 9600;
	USART1->CR3 |= USART_CR3_OVRDIS;

	NVIC_EnableIRQ(USART1_IRQn);
	USART1->CR1 |= USART_CR1_RXNEIE;

	USART1->CR1 |= USART_CR1_UE;

}

void USART_TX (uint8_t* dt, uint16_t sz)
{
  uint16_t ind = 0;
  while (ind<sz)
  {
    while ((USART1->ISR & USART_ISR_TXE) != (USART_ISR_TXE)) {}
    USART1->TDR = (uint16_t)dt[ind];
    ind++;
  }
}

int ProcessStatus(uint8_t statusWork) {

	if(statusWork == DMA_DATA_ADC_RDY)
		statusWork &= ~DMA_DATA_ADC_RDY;
	
	return statusWork;
}


char tx_str[30];
uint8_t statusWork, data;
uint8_t fl = 0;
uint8_t ADC_is_Working = 0;
uint16_t dataADC[1023];

int main(void) {

	Init_TIM3(1);
	Init_ADC(dataADC);
	Init_USART();

	while(1){

		sprintf(tx_str,"commands: 1 - for set frequency trgo (default 1 Hz); 2 - for Start/Stop ADC work; 3 - for reseve fixed amount of ADC data; 4 - for reseve ADC data \r\n");
		USART_TX((uint8_t*)tx_str,strlen(tx_str));

		while (!fl);

		switch (data){

		case 1:

			fl=0;
			sprintf(tx_str,"Write frequency(1..255)\r\n");
			USART_TX((uint8_t*)tx_str,strlen(tx_str));
			while (!fl);
			if (data)
				Init_TIM3(data);
			else{
				sprintf(tx_str,"Null Error\r\n");
				USART_TX((uint8_t*)tx_str,strlen(tx_str));
			}
			fl=0;
			break;

		case 2:

			fl=0;
			if(ADC_is_Working){
				Stop_ADC();
				ADC_is_Working=0;
				sprintf(tx_str,"ADC Sucsessfully Stopped\r\n");
			}
			else{
				Start_ADC();
				ADC_is_Working=1;
				sprintf(tx_str,"ADC Sucsessfully Started\r\n");
			}
			USART_TX((uint8_t*)tx_str,strlen(tx_str));
			break;

		case 3:

			fl=0;
			sprintf(tx_str,"Write amount of data(0..255)\r\n");
			USART_TX((uint8_t*)tx_str,strlen(tx_str));
			while (!fl);
			for(uint8_t i = data; i>0; i --){
				if (statusWork){
					sprintf(tx_str, "%04d\r\n", dataADC[i]);
					USART_TX((uint8_t*)tx_str,strlen(tx_str);
					statusWork=ProcessStatus(statusWork);
				}
			}
			break;

		case 4:

			fl=0;
			uint16_t i=0;

			while (!fl){

				if (statusWork){
					sprintf(tx_str, "%04d\r\n", dataADC[i]);
					USART_TX((uint8_t*)tx_str,strlen(tx_str));
					statusWork=ProcessStatus(statusWork);
					i++;
				}
			}
			fl=0;

			break;

		};

		fl=0;

	}

}

void USART1_IRQHandler() {

	if ((USART1->ISR & USART_ISR_RXNE == USART_ISR_RXNE) && ((USART1->CR1 & USART_CR1_RXNEIE) == (USART_CR1_RXNEIE))) {

		data = (uint8_t) (USART1->RDR & 0x00FF);
		fl = 1;
	}

}

void DMA1_Channel1_IRQHandler() {

	DMA1->IFCR |= DMA_IFCR_CTCIF1;

	statusWork |= DMA_DATA_ADC_RDY;

}

